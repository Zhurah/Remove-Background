"""
Point d'entr√©e principal de l'API FastAPI.

Ce fichier initialise l'application et configure tous les middlewares,
routers, et options globales.
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse
import logging

from app.routers import background

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


#Cr√©ation de l'applicaiton FastAPI
# fastAPI() est l'instance principale de l'application
app = FastAPI(
    title="Background Removal API",
    description="""
    API REST pour supprimer l'arri√®re-plan d'images en utilisant RemBG.
    
    **Fonctionnalit√©s** :
    - Suppression d'arri√®re-plan avec RemBG
    - Support de plusieurs formats d'image (PNG, JPEG, WEBP, etc.)
    - Deux modes d'upload : base64 ou fichier
    - Post-traitement optionnel pour des bords nets
    
    **Endpoints principaux** :
    - `POST /api/v1/remove-background` : Upload base64
    - `POST /api/v1/remove-background-file` : Upload fichier
    - `GET /api/v1/health` : Health check
    """,
    version="1.0.0",
    docs_url="/docs",    # URL de la documentation Swagger UI
    redoc_url="/redoc",    # URL de la documentation ReDoc 
    openapi_url="/openapi.json"   # URL duu sch√©ma OpenAPI   
)

# Configuration CORS (Cross-Origin Resource Sharing)
# Permet √† des applications web sur d'autres domaines d'appeler l'API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifier les domaines autoris√©s
    allow_credentials=True,
    allow_methods=["*"],  # GET, POST, etc.
    allow_headers=["*"],  # Authorization, Content-Type, etc.
)

# Enregistrement du router
# include router permet d'ajouter toutes les routes du router √† l'application
app.include_router(background.router)

# Event handlers : fonctions appel√©es au d√©marrage/arr√™t de l'application
@app.on_event("startup")
async def startup_event():
    """
    Ex√©cut√© au d√©marrage de l'application.
    
    Utile pour :
    - Pr√©charger des mod√®les ML
    - √âtablir des connexions √† la base de donn√©es
    - Initialiser des caches
    """
    logger.info("üöÄ D√©marrage de l'API Background Removal")
    logger.info("üìö Documentation disponible sur : http://localhost:8000/docs")
    
    
app.on_event("shutdown")
async def shutdown_event():
    """
    Ex√©cut√© √† l'arr√™t de l'application.
    
    Utile pour :
    - Fermer les connexions √† la base de donn√©es
    - Nettoyer les ressources
    - Sauvegarder l'√©tat
    """
    logger.info("üõë Arr√™t de l'API Background Removal")
    
    
#Route racine :  redirige vers la documentation
@app.get("/", include_in_schema=False)
async def root():
    return RedirectResponse(url="/docs")

# Exemple de middleware personnalis√© (optionnel)
@app.middleware("http")
async def log_requests(request, call_next):
    """
    Middleware qui log chaque requ√™te.
    
    Middleware = fonction qui s'ex√©cute avant/apr√®s chaque requ√™te
    call_next = fonction qui appelle le prochain middleware ou la route
    
    Args:
        request: Requ√™te HTTP entrante
        call_next: Fonction pour passer √† l'√©tape suivante
    
    Returns:
        R√©ponse HTTP
    """
    # Avant la requ√™te
    logger.info(f"üì® {request.method} {request.url.path}")
    
    # Traiter la requ√™te
    response = await call_next(request)
    
    # Apr√®s la requ√™te
    logger.info(f"‚úÖ {request.method} {request.url.path} - Status: {response.status_code}")
    
    return response

# Point d'entr√©e pour lancer l'application directement avec Python
# Alternative √† uvicron en ligne de commande

if __name__== "__main__":
    import uvicorn
    
    # uvicorn.run() =. lance le serveru ASGI
    uvicorn.run(
                "app:main:app",                                 # Chemin vers l'application (module: variable)
                host="0.0.0.0",                                 # √âcoute sur toutes les interfaces r√©seau
                port=8000,                                      # Port HTTP
                reload= True ,                                   # Recharge automatiquement lors des changements de code
                log_level="info"
                )




